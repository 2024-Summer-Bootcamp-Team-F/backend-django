name: Django CI/CD

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # Python 설정
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 의존성 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt 

      # Docker Compose 설정
      - name: Set up Docker Compose
        run: |
          mkdir -p db
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > db/.env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> db/.env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> db/.env
          echo "DATABASE_PASS=${{ secrets.DATABASE_PASS }}" >> db/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> db/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> db/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> db/.env
          echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> db/.env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> db/.env

      # Docker Compose 빌드 및 실행
      - name: Build and Run with Docker Compose
        run: docker-compose up --build -d

      # MySQL 서비스 대기 및 상태 확인
      - name: Wait for MySQL to be ready
        run: |
          python wait_mysql.py

      # 데이터베이스 마이그레이션 및 테스트 실행
      - name: Run Migrations
        run: docker-compose run --env-file db/.env backend python manage.py migrate --verbosity 3

      # 마이그레이션 후 상태 확인
      - name: Check Migration Status
        run: docker-compose run --env-file db/.env backend python manage.py showmigrations

      # 테스트 실행
      - name: Run Tests
        run: docker-compose run --env-file db/.env backend pytest --ds=backend_django.settings

      # 코드 커버리지 실행
      - name: Run Coverage
        run: |
          docker-compose run --env-file db/.env backend pip install coverage
          docker-compose run --env-file db/.env backend coverage run -m pytest
          docker-compose run --env-file db/.env backend coverage report
          docker-compose run --env-file db/.env backend coverage xml

      # 코드 커버리지 업로드
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella

      # Docker Compose 종료
      - name: Shutdown Docker Compose
        run: docker-compose down

  integration-tests:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Python 설정
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 의존성 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Set up Docker Compose
        run: |
          mkdir -p db
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > db/.env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> db/.env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> db/.env
          echo "DATABASE_PASS=${{ secrets.DATABASE_PASS }}" >> db/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> db/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> db/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> db/.env
          echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> db/.env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> db/.env

      - name: Build and Run with Docker Compose
        run: docker-compose up --build -d

      - name: Run Integration Tests
        run: |
          docker-compose run --env-file db/.env backend python manage.py migrate
          docker-compose run --env-file db/.env backend pytest -m integration

      - name: Shutdown Docker Compose
        run: docker-compose down

  deploy:
    needs: [build, integration-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # SSH 설정 단계
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}  # GitHub Secrets에 저장된 SSH 키 사용

      # 파일을 EC2 인스턴스로 복사
      - name: Copy Files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r * ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/backend-django

      # SSH를 통해 EC2 인스턴스에 접속하여 배포 작업 실행
      - name: SSH and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/backend-django
          docker-compose down
          git pull origin develop
          docker-compose up --build -d
          EOF
